//
// Created by WeiZhen on 2024/4/7.
//

#include "YOLODetector.h"
#include "Utils/Utils.h"

#include <fstream>

YOLODetector::YOLODetector() = default;

void YOLODetector::initConfig(const std::string& onnxpath, int iw, int ih, float threshold, bool isCuda) {
    this->input_w = iw;
    this->input_h = ih;
    this->threshold_score = threshold;
    this->net = cv::dnn::readNetFromONNX(onnxpath);
    if(isCuda){
        spdlog::info("Intialize Model By GPU");
        this->net.setPreferableBackend(cv::dnn::DNN_BACKEND_CUDA);
        this->net.setPreferableTarget(cv::dnn::DNN_TARGET_CUDA);
    } else {
        spdlog::info("Intialize Model By CPU");
        this->net.setPreferableBackend(cv::dnn::DNN_BACKEND_DEFAULT);
        this->net.setPreferableTarget(cv::dnn::DNN_TARGET_CPU);
    }
}

void YOLODetector::detect(cv::Mat &img, std::vector<DetectResult> &results) {
    // 图象预处理 - 格式化操作
    cv::Mat frame;
    img.copyTo(frame);
    int imgMax = std::max(img.cols, img.rows);
    float ratio = float(imgMax) / float(this->input_h);
    frame = Utils::resize_max_edge(frame, this->input_h);
//    frame = resize_max_edge(frame, this->input_h);
    int w = frame.cols;
    int h = frame.rows;
    int _max = std::max(h, w);
    cv::Mat image = cv::Mat::zeros(cv::Size(_max, _max), CV_8UC3);
    cv::Rect roi(0, 0, w, h);
    frame.copyTo(image(roi));

    cv::Mat blob = cv::dnn::blobFromImage(image, 1 / 255.0, cv::Size(this->input_w, this->input_h), cv::Scalar(0, 0, 0),
                                          true, false);

    this->net.setInput(blob);

    std::vector<cv::Mat> outputs;
    this->net.forward(outputs, this->net.getUnconnectedOutLayersNames());

    int rows = outputs[0].size[1];
    int dimensions = outputs[0].size[2];

    rows = outputs[0].size[2];
    dimensions = outputs[0].size[1];

    outputs[0] = outputs[0].reshape(1, dimensions);
    cv::transpose(outputs[0], outputs[0]);

    std::ofstream ofs("out.txt",std::ios::out);
    ofs << outputs[0];
    ofs.close();

    float *data = (float *)outputs[0].data;

    float x_factor = image.cols / this->input_w;
    float y_factor = image.rows / this->input_h;

    std::vector<int> class_ids;
    std::vector<float> confidences;
    std::vector<cv::Rect> boxes;

    for (int i = 0; i < rows; ++i)
    {
        float *classes_scores = data+4;

        //cv::Mat scores(1, classes.size(), CV_32FC1, classes_scores);
        cv::Mat scores(1, 80, CV_32FC1, classes_scores);
        cv::Point class_id;
        double maxClassScore;

        minMaxLoc(scores, 0, &maxClassScore, 0, &class_id);

        if (maxClassScore > threshold_score)
        {
            confidences.push_back(maxClassScore);
            class_ids.push_back(class_id.x);

            float x = data[0];
            float y = data[1];
            float w = data[2];
            float h = data[3];

            int left = int((x - 0.5 * w) * x_factor);
            int top = int((y - 0.5 * h) * y_factor);

            int width = int(w * x_factor);
            int height = int(h * y_factor);

            boxes.push_back(cv::Rect(left, top, width, height));
        }

        data += dimensions;
    }

    std::vector<int> indexes;
    cv::dnn::NMSBoxes(boxes, confidences, threshold_score, 0.45, indexes);
    for (int index : indexes)
    {
        DetectResult dr;
        int idx = class_ids[index];
        dr.box = boxes[index];
        dr.classId = idx;
        dr.score = confidences[index];
        results.push_back(dr);
    }
}

